#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
    max_revenue = {"revenue": 0}
    model_sales = {}
    year_sales = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # Determine car model with most sales.
        car_dict = item["car"]
        car_model = car_dict["car_model"]
        if car_model not in model_sales:
            model_sales[car_model] = item["total_sales"]
        else:
            model_sales[car_model] += item["total_sales"]

        # Add running total of sales to year.
        car_year = car_dict["car_year"]
        if car_year not in year_sales:
            year_sales[car_year] = item["total_sales"]
        else:
            year_sales[car_year] += item["total_sales"]

    max_year_key = max(year_sales, key=lambda k: year_sales[k])
    max_model_key = max(model_sales, key=lambda k: model_sales[k])
    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            max_model_key, model_sales[max_model_key]),
        "The most popular year was {} with {} sales.".format(
            max_year_key, year_sales[max_year_key])
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)

    # Create pdf report.
    table_data = cars_dict_to_table(data)
    body = '\n'.join(summary)
    reports.generate("/tmp/cars.pdf", "Car Sales Summary", body, table_data)

    # Send pdf via email as attachment.
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)
